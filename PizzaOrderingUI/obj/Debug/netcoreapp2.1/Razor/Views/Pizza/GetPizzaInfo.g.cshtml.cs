#pragma checksum "C:\Users\z8410\Desktop\copyPizzaOrderingAPI\PizzaOrderingAPI\PizzaOrderingUI\Views\Pizza\GetPizzaInfo.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8ee454540112b1bbbddb48ea1e86ae3188be4090"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Pizza_GetPizzaInfo), @"mvc.1.0.view", @"/Views/Pizza/GetPizzaInfo.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Pizza/GetPizzaInfo.cshtml", typeof(AspNetCore.Views_Pizza_GetPizzaInfo))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\z8410\Desktop\copyPizzaOrderingAPI\PizzaOrderingAPI\PizzaOrderingUI\Views\_ViewImports.cshtml"
using PizzaOrderingUI;

#line default
#line hidden
#line 2 "C:\Users\z8410\Desktop\copyPizzaOrderingAPI\PizzaOrderingAPI\PizzaOrderingUI\Views\_ViewImports.cshtml"
using PizzaOrderingUI.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8ee454540112b1bbbddb48ea1e86ae3188be4090", @"/Views/Pizza/GetPizzaInfo.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9f1b0c13287050f31df2b1eb1b9674d70f33aae7", @"/Views/_ViewImports.cshtml")]
    public class Views_Pizza_GetPizzaInfo : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Entities.ViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Users\z8410\Desktop\copyPizzaOrderingAPI\PizzaOrderingAPI\PizzaOrderingUI\Views\Pizza\GetPizzaInfo.cshtml"
  
    ViewData["Title"] = "GetPizzaInfo";

#line default
#line hidden
            BeginContext(75, 27, true);
            WriteLiteral("\r\n<h2>Create Pizza</h2>\r\n\r\n");
            EndContext();
            BeginContext(358, 6959, true);
            WriteLiteral(@"
    <div class=""container"">
        <div class=""row"">
            <div class=""col-sm-6"">
             

                    <div class=""form-group"">

                        <div id=""toppingList""></div>

                        <div id=""shoppingcart""></div>


                    </div>
                    <div>
                        <button class=""btn btn-default"" id=""addPizza"">Add Pizza</button>
                    </div>
             
            </div>
          
        </div>

    </div>



    <script>
 


        $(document).ready(function (e) {
            var url = ""http://localhost:54241/api/Pizzas/GetPizzaInfo"";
            //change to your url, same for other view.
            $.ajax({
                contentType: 'application/json',
                type: ""GET"",
                url: url,
                success: function (data, textStatus, jqXHR) {

                    var Id = 0;
                    //Size

                    $(""#toppingList"").append(");
            WriteLiteral(@"""<h2>Size</h2>"");
                    for (var item of Object.values(data.sizes)) {

                        $(""#toppingList"").append(`<input id='size${++Id}' type='radio' name='size' value=""${item.id}"" /> `);
                        $(""#toppingList"").append(`<label>${item.sizeName}($${item.price})</label>`);
                    }

                    $('#size1').attr('checked', 'checked');
         
                    Id = 0;

                    //Crust
                   
                
                       $(""#toppingList"").append(""<h2>Crust</h2>"");
                   
                    for (var item of Object.values(data.crusts)) {
                        $(""#toppingList"").append(`<input id='crust${++Id}' type='radio' name='crust' value=""${item.id}""  />`);
                        $(""#toppingList"").append(`<label>${item.crustName}($${item.price})</label>`);
                        console.log(""Curst: "" + item.id);
                    }

                    $('#crust1').attr('c");
            WriteLiteral(@"hecked', 'checked');
                 
          
                    Id = 0;


                    //Sauce

                     
                   
                    $(""#toppingList"").append(""<h2>Sauce:</h2>"");
                    for (var item of Object.values(data.sauces)) {
                        $(""#toppingList"").append(`<input type='radio' name='sauce' id='sauce${++Id}' value=""${item.id}"" />`);
                        $(""#toppingList"").append(`<label>${item.sauceName}($${item.price})</label>`);
                    }

                     $('#sauce1').attr('checked', 'checked');
                   
                  
                    Id = 0;
                  

                    //Sauce Amount
                    $(""#toppingList"").append(""<h2>Sauce Amount:</h2>"");
                    for (var item of Object.values(data.sauceAmounts)) {
                        $(""#toppingList"").append(`<input type='radio' id='sauceAmount${++Id}' name='sauceAmount' value=""${item.id}""/>`);");
            WriteLiteral(@"
                        $(""#toppingList"").append(`<label>${item.amount}($${item.price})</label>`);
                    }
                       $('#sauceAmount1').attr('checked', 'checked');
                   
                    
                    Id = 0;
             

                    //Cheese Amount

                    $(""#toppingList"").append(""<h2>Cheese Amount:</h2>"");
                    for (var item of Object.values(data.cheeseAmounts)) {
                        $(""#toppingList"").append(`<input type='radio' id='cheeseAmount${++Id}' name='cheeseAmount' value=""${item.id}"" />`);
                        $(""#toppingList"").append(`<label>${item.amount}($${item.price})</label>`);
                    }
                       $('#cheeseAmount1').attr('checked', 'checked');
                   
                    
                    Id = 0;
                    


                    //Toppings

                    $(""#toppingList"").append(""<h2>Toppings:</h2>"");
              ");
            WriteLiteral(@"      for (var item of Object.values(data.toppings)) {
                        $(""#toppingList"").append(`<input type='checkbox' name='ToppingList' id='topping${++Id}'value=""${item.id}""/>`);
                        $(""#toppingList"").append(`<label>${item.toppingName}($${item.toppingPrice})</label>`);
                        
                    }
                   

                    $('#topping1').attr('checked', 'checked');
                     $('#topping2').attr('checked', 'checked');
                   
                  
                    Id = 0;
                   





                },
                error: function (jqXHR, textStatus, errorThrown) {
                    $(""#getToppingResult"").val(jqXHR.statusText);
                }
            });
        });

        $('#addPizza').click(function (e) {

            var sizeid = parseInt($(""input[name='size']:checked"").val());
            var sauceAmountid =  parseInt($(""input[name='sauceAmount']:checked"").val());
");
            WriteLiteral(@"            var sauceid =  parseInt($(""input[name='sauce']:checked"").val());
            var cheeseAmountid =   parseInt($(""input[name='cheeseAmount']:checked"").val());
            var crustid = parseInt($(""input[name='crust']:checked"").val());
            var list = [];
             $.each($(""input[name='ToppingList']:checked""), function () {
                 list.push($(this).val());
              });


            var url = ""http://localhost:54241/api/Pizzas/"";
         
        $.ajax({
            contentType: 'application/json',
            type: ""POST"",
            url: url,
            data: JSON.stringify({
                SizeId: sizeid,
                SauceId:sauceid,
                SauceAmountId: sauceAmountid,
                CheeseAmountId: cheeseAmountid,
                CrustId: crustid,
                OrderId: 100,
                ToppingCount: list.length,
                Price: 0,
                ToppinIdList: list

            }),

           
            su");
            WriteLiteral(@"ccess: function (data, textStatus, jqXHR) {
              
                console.log(""Create pizza.."");
                console.log(data.PizzaId);
                $.get(""/Customer/OrderSession/"", { OrderId: 100 }, function (data) {
            
                  
             });  
                window.location.href = ""http://localhost:54597/Pizza/CreatePizzaIndex/"" + data.PizzaId;
              
          
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $(""#postResult"").val(jqXHR.statusText);
             
            }
        });

            console.log(Math.floor((Math.random() * 2000000000) + 10000000));
            $(""#shoppingcart"").append(""<p>"" + ""Size: "" + sizeid + ""</p>"");
                


        });

    </script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Entities.ViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
